pipeline {
    agent any
    tools {
        maven 'M2_HOME'  // Ensure this is correctly set in Jenkins
    }
    stages {
        stage('Git checkout') {
            steps {
                echo 'Cloning the Git repository'
                git branch: 'main', url: 'https://github.com/yadagiri7013/Insurance-pro27.git'
            }
        }
        stage('Create a Package') {
            steps {
                echo 'Creating a package using Maven'
                sh 'mvn clean package'
            }
        }
       stage('Publish the HTML Reports') {
      steps {
          publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: '/var/lib/jenkins/workspace/insurance_project/target/surefire-reports', reportFiles: 'index.html', reportName: 'HTML Report', reportTitles: '', useWrapperFileDirectly: true])
                        }
            }
        stage('Create a Docker image from the Package Insure-Me.jar file') {
            steps {
                echo 'Building Docker image'
                sh 'docker build -t yadagiri14/insurance:latest.'
            }
        }
        stage('Login to Dockerhub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-id-user', passwordVariable: 'dockerPass', usernameVariable: 'dockerUser')]) {
                    echo 'Logging in to Dockerhub'
                    sh 'docker login -u ${dockerUser} -p ${dockerPass}'
                }
            }
        }
        stage('Push the Docker image') {
            steps {
                script {
                    def tagname = "v${env.BUILD_NUMBER}"  // Using the Jenkins environment variable BUILD_NUMBER
                    echo "Pushing Docker image with tag: ${tagname}"
                    sh "docker tag yadagiri14/insurance:latest yadagiri14/insurance:${tagname}"
                    sh "docker push yadagiri14/insurance:${tagname}"
                }
            }
        }
        stage('List Workspace Files') {
            steps {
                echo 'Listing the files in the workspace to confirm deploy.yml exists'
                sh 'ls -l ${workspace}'
            }
        }
        stage('Ansible config and Deployment') {
            steps {
                echo 'Running Ansible Playbook for deployment'
                // Ensure the full path to the deploy.yml is used
                ansiblePlaybook credentialsId: 'sshkey', 
                    disableHostKeyChecking: true, 
                    installation: 'ansible', 
                    inventory: '/etc/ansible/hosts', 
                    playbook: "${workspace}/deploy.yml",  // Full path to deploy.yml
                    vaultTmpPath: ''
            }
        }
    }
    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
